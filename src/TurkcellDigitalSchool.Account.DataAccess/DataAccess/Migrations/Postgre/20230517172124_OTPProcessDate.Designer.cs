// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TurkcellDigitalSchool.Account.DataAccess.DataAccess.Contexts;

#nullable disable

namespace TurkcellDigitalSchool.Account.DataAccess.DataAccess.Migrations.Postgre
{
    [DbContext(typeof(AccountDbContext))]
    [Migration("20230517172124_OTPProcessDate")]
    partial class OTPProcessDate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.AppSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("integer")
                        .HasColumnName("customerid");

                    b.Property<DateTime>("InsertTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("inserttime");

                    b.Property<long?>("InsertUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("insertuserid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<long?>("LanguageId")
                        .HasColumnType("bigint")
                        .HasColumnName("languageid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer")
                        .HasColumnName("recordstatus");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatetime");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("updateuserid");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.Property<int?>("VouId")
                        .HasColumnType("integer")
                        .HasColumnName("vouid");

                    b.HasKey("Id")
                        .HasName("pk_appsetting");

                    b.ToTable("appsetting", (string)null);
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.City", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime>("InsertTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("inserttime");

                    b.Property<long?>("InsertUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("insertuserid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer")
                        .HasColumnName("recordstatus");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatetime");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("updateuserid");

                    b.HasKey("Id")
                        .HasName("pk_city");

                    b.ToTable("city", (string)null);
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.ContractKind", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<long>("ContractTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("contracttypeid");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime>("InsertTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("inserttime");

                    b.Property<long?>("InsertUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("insertuserid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer")
                        .HasColumnName("recordstatus");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatetime");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("updateuserid");

                    b.HasKey("Id")
                        .HasName("pk_contractkind");

                    b.HasIndex("ContractTypeId")
                        .HasDatabaseName("ix_contractkind_contracttypeid");

                    b.ToTable("contractkind", (string)null);
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.ContractType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime>("InsertTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("inserttime");

                    b.Property<long?>("InsertUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("insertuserid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer")
                        .HasColumnName("recordstatus");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatetime");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("updateuserid");

                    b.HasKey("Id")
                        .HasName("pk_contracttype");

                    b.ToTable("contracttype", (string)null);
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime>("InsertTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("inserttime");

                    b.Property<long?>("InsertUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("insertuserid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer")
                        .HasColumnName("recordstatus");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatetime");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("updateuserid");

                    b.HasKey("Id")
                        .HasName("pk_country");

                    b.ToTable("country", (string)null);
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.County", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CityId")
                        .HasColumnType("bigint")
                        .HasColumnName("cityid");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime>("InsertTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("inserttime");

                    b.Property<long?>("InsertUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("insertuserid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer")
                        .HasColumnName("recordstatus");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatetime");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("updateuserid");

                    b.HasKey("Id")
                        .HasName("pk_county");

                    b.HasIndex("CityId")
                        .HasDatabaseName("ix_county_cityid");

                    b.ToTable("county", (string)null);
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.Document", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("ClientRequiredApproval")
                        .HasColumnType("boolean")
                        .HasColumnName("clientrequiredapproval");

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<long>("ContractKindId")
                        .HasColumnType("bigint")
                        .HasColumnName("contractkindid");

                    b.Property<DateTime>("InsertTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("inserttime");

                    b.Property<long?>("InsertUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("insertuserid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer")
                        .HasColumnName("recordstatus");

                    b.Property<bool>("RequiredApproval")
                        .HasColumnType("boolean")
                        .HasColumnName("requiredapproval");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatetime");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("updateuserid");

                    b.Property<DateTime>("ValidEndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("validenddate");

                    b.Property<DateTime>("ValidStartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("validstartdate");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("pk_document");

                    b.HasIndex("ContractKindId")
                        .HasDatabaseName("ix_document_contractkindid");

                    b.ToTable("document", (string)null);
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.DocumentContractType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ContractTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("contracttypeid");

                    b.Property<long>("DocumentId")
                        .HasColumnType("bigint")
                        .HasColumnName("documentid");

                    b.Property<DateTime>("InsertTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("inserttime");

                    b.Property<long?>("InsertUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("insertuserid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatetime");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("updateuserid");

                    b.HasKey("Id")
                        .HasName("pk_documentcontracttype");

                    b.HasIndex("ContractTypeId")
                        .HasDatabaseName("ix_documentcontracttype_contracttypeid");

                    b.HasIndex("DocumentId")
                        .HasDatabaseName("ix_documentcontracttype_documentid");

                    b.ToTable("documentcontracttype", (string)null);
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.Education", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Classroom")
                        .HasColumnType("text")
                        .HasColumnName("classroom");

                    b.Property<string>("DiplomaGrade")
                        .HasColumnType("text")
                        .HasColumnName("diplomagrade");

                    b.Property<string>("Field")
                        .HasColumnType("text")
                        .HasColumnName("field");

                    b.Property<string>("GraduationStatus")
                        .HasColumnType("text")
                        .HasColumnName("graduationstatus");

                    b.Property<string>("GraduationYear")
                        .HasColumnType("text")
                        .HasColumnName("graduationyear");

                    b.Property<DateTime>("InsertTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("inserttime");

                    b.Property<long?>("InsertUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("insertuserid");

                    b.Property<string>("Institution")
                        .HasColumnType("text")
                        .HasColumnName("institution");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<bool>("IsReligiousCultureCourseMust")
                        .HasColumnType("boolean")
                        .HasColumnName("isreligiousculturecoursemust");

                    b.Property<string>("School")
                        .HasColumnType("text")
                        .HasColumnName("school");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatetime");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("updateuserid");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("userid");

                    b.Property<string>("YKSExperienceInformation")
                        .HasColumnType("text")
                        .HasColumnName("yksexperienceinformation");

                    b.HasKey("Id")
                        .HasName("pk_education");

                    b.ToTable("education", (string)null);
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.ForgetPasswordFailCounter", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CsrfToken")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("csrftoken");

                    b.Property<int?>("FailCount")
                        .HasColumnType("integer")
                        .HasColumnName("failcount");

                    b.Property<DateTime>("InsertTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("inserttime")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatetime");

                    b.HasKey("Id")
                        .HasName("pk_forgetpasswordfailcounters");

                    b.HasIndex("CsrfToken")
                        .HasDatabaseName("ix_forgetpasswordfailcounters_csrftoken");

                    b.HasIndex("InsertTime")
                        .HasDatabaseName("ix_forgetpasswordfailcounters_inserttime");

                    b.ToTable("forgetpasswordfailcounters", (string)null);
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.GraduationYear", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime>("InsertTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("inserttime");

                    b.Property<long?>("InsertUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("insertuserid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer")
                        .HasColumnName("recordstatus");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatetime");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("updateuserid");

                    b.HasKey("Id")
                        .HasName("pk_graduationyear");

                    b.ToTable("graduationyear", (string)null);
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.ImageOfPackage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("FileId")
                        .HasColumnType("bigint")
                        .HasColumnName("fileid");

                    b.Property<DateTime>("InsertTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("inserttime");

                    b.Property<long?>("InsertUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("insertuserid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<long>("PackageId")
                        .HasColumnType("bigint")
                        .HasColumnName("packageid");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatetime");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("updateuserid");

                    b.HasKey("Id")
                        .HasName("pk_imageofpackage");

                    b.HasIndex("FileId")
                        .HasDatabaseName("ix_imageofpackage_fileid");

                    b.HasIndex("PackageId")
                        .HasDatabaseName("ix_imageofpackage_packageid");

                    b.ToTable("imageofpackage", (string)null);
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.Institution", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime>("InsertTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("inserttime");

                    b.Property<long?>("InsertUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("insertuserid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer")
                        .HasColumnName("recordstatus");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatetime");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("updateuserid");

                    b.HasKey("Id")
                        .HasName("pk_institution");

                    b.ToTable("institution", (string)null);
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.InstitutionType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime>("InsertTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("inserttime");

                    b.Property<long?>("InsertUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("insertuserid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer")
                        .HasColumnName("recordstatus");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatetime");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("updateuserid");

                    b.HasKey("Id")
                        .HasName("pk_institutiontype");

                    b.ToTable("institutiontype", (string)null);
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.LoginFailCounter", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CsrfToken")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("csrftoken");

                    b.Property<int?>("FailCount")
                        .HasColumnType("integer")
                        .HasColumnName("failcount");

                    b.Property<DateTime>("InsertTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("inserttime")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatetime");

                    b.HasKey("Id")
                        .HasName("pk_loginfailcounters");

                    b.HasIndex("CsrfToken")
                        .HasDatabaseName("ix_loginfailcounters_csrftoken");

                    b.HasIndex("InsertTime")
                        .HasDatabaseName("ix_loginfailcounters_inserttime");

                    b.ToTable("loginfailcounters", (string)null);
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.LoginFailForgetPassSendLink", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("CheckCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("checkcount");

                    b.Property<DateTime>("ExpDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expdate");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("guid");

                    b.Property<DateTime>("InsertTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("inserttime")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatetime");

                    b.Property<int>("UsedStatus")
                        .HasColumnType("integer")
                        .HasColumnName("usedstatus");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("pk_loginfailforgetpasssendlinks");

                    b.HasIndex("ExpDate")
                        .HasDatabaseName("ix_loginfailforgetpasssendlinks_expdate");

                    b.HasIndex("Guid", "UserId")
                        .HasDatabaseName("ix_loginfailforgetpasssendlinks_guid_userid");

                    b.ToTable("loginfailforgetpasssendlinks", (string)null);
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.Message", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("InsertTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("inserttime");

                    b.Property<long?>("InsertUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("insertuserid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("MessageKey")
                        .HasColumnType("text")
                        .HasColumnName("messagekey");

                    b.Property<int>("MessageNumber")
                        .HasColumnType("integer")
                        .HasColumnName("messagenumber");

                    b.Property<long>("MessageTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("messagetypeid");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatetime");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("updateuserid");

                    b.Property<string>("UsedClass")
                        .HasColumnType("text")
                        .HasColumnName("usedclass");

                    b.HasKey("Id")
                        .HasName("pk_message");

                    b.HasIndex("MessageTypeId")
                        .HasDatabaseName("ix_message_messagetypeid");

                    b.ToTable("message", (string)null);
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.MessageMap", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("DefaultNameOfUsedClass")
                        .HasColumnType("text")
                        .HasColumnName("defaultnameofusedclass");

                    b.Property<DateTime>("InsertTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("inserttime");

                    b.Property<long?>("InsertUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("insertuserid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("Message")
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<string>("MessageKey")
                        .HasColumnType("text")
                        .HasColumnName("messagekey");

                    b.Property<string>("MessageParameters")
                        .HasColumnType("text")
                        .HasColumnName("messageparameters");

                    b.Property<string>("OldVersionOfUserFriendlyMessage")
                        .HasColumnType("text")
                        .HasColumnName("oldversionofuserfriendlymessage");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatetime");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("updateuserid");

                    b.Property<string>("UsedClass")
                        .HasColumnType("text")
                        .HasColumnName("usedclass");

                    b.Property<string>("UserFriendlyNameOfMessage")
                        .HasColumnType("text")
                        .HasColumnName("userfriendlynameofmessage");

                    b.Property<string>("UserFriendlyNameOfUsedClass")
                        .HasColumnType("text")
                        .HasColumnName("userfriendlynameofusedclass");

                    b.HasKey("Id")
                        .HasName("pk_messagemap");

                    b.ToTable("messagemap", (string)null);
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.MessageType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<int>("Count")
                        .HasColumnType("integer")
                        .HasColumnName("count");

                    b.Property<DateTime>("InsertTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("inserttime");

                    b.Property<long?>("InsertUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("insertuserid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer")
                        .HasColumnName("recordstatus");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatetime");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("updateuserid");

                    b.HasKey("Id")
                        .HasName("pk_messagetype");

                    b.ToTable("messagetype", (string)null);
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.MobileLogin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CellPhone")
                        .HasColumnType("text")
                        .HasColumnName("cellphone");

                    b.Property<int>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("integer")
                        .HasColumnName("code");

                    b.Property<string>("ExternalUserId")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("externaluserid");

                    b.Property<DateTime>("InsertTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("inserttime");

                    b.Property<long?>("InsertUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("insertuserid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<DateTime>("LastSendDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lastsenddate");

                    b.Property<string>("NewPassGuid")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("newpassguid");

                    b.Property<DateTime?>("NewPassGuidExp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("newpassguidexp");

                    b.Property<int?>("NewPassStatus")
                        .HasColumnType("integer")
                        .HasColumnName("newpassstatus");

                    b.Property<int>("Provider")
                        .HasColumnType("integer")
                        .HasColumnName("provider");

                    b.Property<int>("ReSendCount")
                        .HasColumnType("integer")
                        .HasColumnName("resendcount");

                    b.Property<DateTime>("SendDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("senddate");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatetime");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("updateuserid");

                    b.Property<DateTime>("UsedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("useddate");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("pk_mobilelogins");

                    b.HasIndex("UserId", "ExternalUserId", "Provider")
                        .HasDatabaseName("ix_mobilelogins_userid_externaluserid_provider");

                    b.HasIndex("Id", "NewPassGuid", "NewPassStatus", "NewPassGuidExp")
                        .HasDatabaseName("ix_mobilelogins_id_newpassguid_newpassstatus_newpassguidexp");

                    b.ToTable("mobilelogins", (string)null);
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.OneTimePassword", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("ChannelTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("channeltypeid");

                    b.Property<int>("Code")
                        .HasColumnType("integer")
                        .HasColumnName("code");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expirydate");

                    b.Property<DateTime>("InsertTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("inserttime");

                    b.Property<long?>("InsertUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("insertuserid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<int>("OtpStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("otpstatusid");

                    b.Property<DateTime?>("ProcessDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processdate");

                    b.Property<DateTime>("SendDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("senddate");

                    b.Property<int>("ServiceId")
                        .HasColumnType("integer")
                        .HasColumnName("serviceid");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatetime");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("updateuserid");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("pk_onetimepasswords");

                    b.ToTable("onetimepasswords", (string)null);
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.OperationClaim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<long?>("CategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("categoryid");

                    b.Property<string>("CategoryName")
                        .HasColumnType("text")
                        .HasColumnName("categoryname");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime>("InsertTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("inserttime");

                    b.Property<long?>("InsertUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("insertuserid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("SegmentId")
                        .HasColumnType("integer")
                        .HasColumnName("segmentid");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatetime");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("updateuserid");

                    b.Property<int?>("VouId")
                        .HasColumnType("integer")
                        .HasColumnName("vouid");

                    b.Property<string>("VouName")
                        .HasColumnType("text")
                        .HasColumnName("vouname");

                    b.HasKey("Id")
                        .HasName("pk_operationclaim");

                    b.ToTable("operationclaim", (string)null);
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.Organisation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AdminMail")
                        .HasColumnType("text")
                        .HasColumnName("adminmail");

                    b.Property<string>("AdminName")
                        .HasColumnType("text")
                        .HasColumnName("adminname");

                    b.Property<string>("AdminPhone")
                        .HasColumnType("text")
                        .HasColumnName("adminphone");

                    b.Property<string>("AdminSurname")
                        .HasColumnType("text")
                        .HasColumnName("adminsurname");

                    b.Property<string>("AdminTc")
                        .HasColumnType("text")
                        .HasColumnName("admintc");

                    b.Property<string>("ApiKey")
                        .HasColumnType("text")
                        .HasColumnName("apikey");

                    b.Property<string>("ApiSecret")
                        .HasColumnType("text")
                        .HasColumnName("apisecret");

                    b.Property<long>("CityId")
                        .HasColumnType("bigint")
                        .HasColumnName("cityid");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("ContactMail")
                        .HasColumnType("text")
                        .HasColumnName("contactmail");

                    b.Property<string>("ContactName")
                        .HasColumnType("text")
                        .HasColumnName("contactname");

                    b.Property<string>("ContactPhone")
                        .HasColumnType("text")
                        .HasColumnName("contactphone");

                    b.Property<DateTime>("ContractFinishDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("contractfinishdate");

                    b.Property<string>("ContractNumber")
                        .HasColumnType("text")
                        .HasColumnName("contractnumber");

                    b.Property<DateTime>("ContractStartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("contractstartdate");

                    b.Property<long>("CountyId")
                        .HasColumnType("bigint")
                        .HasColumnName("countyid");

                    b.Property<long>("CrmId")
                        .HasColumnType("bigint")
                        .HasColumnName("crmid");

                    b.Property<string>("CustomerManager")
                        .HasColumnType("text")
                        .HasColumnName("customermanager");

                    b.Property<string>("CustomerNumber")
                        .HasColumnType("text")
                        .HasColumnName("customernumber");

                    b.Property<string>("DomainName")
                        .HasColumnType("text")
                        .HasColumnName("domainname");

                    b.Property<string>("HostName")
                        .HasColumnType("text")
                        .HasColumnName("hostname");

                    b.Property<DateTime>("InsertTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("inserttime");

                    b.Property<long?>("InsertUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("insertuserid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<int>("LicenceNumber")
                        .HasColumnType("integer")
                        .HasColumnName("licencenumber");

                    b.Property<DateTime>("MembershipFinishDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("membershipfinishdate");

                    b.Property<DateTime>("MembershipStartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("membershipstartdate");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("OrganisationAddress")
                        .HasColumnType("text")
                        .HasColumnName("organisationaddress");

                    b.Property<long>("OrganisationImageId")
                        .HasColumnType("bigint")
                        .HasColumnName("organisationimageid");

                    b.Property<string>("OrganisationMail")
                        .HasColumnType("text")
                        .HasColumnName("organisationmail");

                    b.Property<string>("OrganisationManager")
                        .HasColumnType("text")
                        .HasColumnName("organisationmanager");

                    b.Property<int>("OrganisationStatusInfo")
                        .HasColumnType("integer")
                        .HasColumnName("organisationstatusinfo");

                    b.Property<long>("OrganisationTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("organisationtypeid");

                    b.Property<string>("OrganisationWebSite")
                        .HasColumnType("text")
                        .HasColumnName("organisationwebsite");

                    b.Property<long>("PackageId")
                        .HasColumnType("bigint")
                        .HasColumnName("packageid");

                    b.Property<int>("PackageKind")
                        .HasColumnType("integer")
                        .HasColumnName("packagekind");

                    b.Property<string>("PackageName")
                        .HasColumnType("text")
                        .HasColumnName("packagename");

                    b.Property<long?>("ParantId")
                        .HasColumnType("bigint")
                        .HasColumnName("parantid");

                    b.Property<string>("ReasonForStatus")
                        .HasColumnType("text")
                        .HasColumnName("reasonforstatus");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer")
                        .HasColumnName("recordstatus");

                    b.Property<int>("SegmentType")
                        .HasColumnType("integer")
                        .HasColumnName("segmenttype");

                    b.Property<int>("ServiceInfoChoice")
                        .HasColumnType("integer")
                        .HasColumnName("serviceinfochoice");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatetime");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("updateuserid");

                    b.Property<int>("VirtualMeetingRoomQuota")
                        .HasColumnType("integer")
                        .HasColumnName("virtualmeetingroomquota");

                    b.Property<int>("VirtualTrainingRoomQuota")
                        .HasColumnType("integer")
                        .HasColumnName("virtualtrainingroomquota");

                    b.HasKey("Id")
                        .HasName("pk_organisation");

                    b.HasIndex("OrganisationTypeId")
                        .HasDatabaseName("ix_organisation_organisationtypeid");

                    b.ToTable("organisation", (string)null);
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.OrganisationChangeReqContent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("InsertTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("inserttime");

                    b.Property<long?>("InsertUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("insertuserid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<int>("PropertyEnum")
                        .HasColumnType("integer")
                        .HasColumnName("propertyenum");

                    b.Property<string>("PropertyValue")
                        .HasColumnType("text")
                        .HasColumnName("propertyvalue");

                    b.Property<long>("RequestId")
                        .HasColumnType("bigint")
                        .HasColumnName("requestid");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatetime");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("updateuserid");

                    b.HasKey("Id")
                        .HasName("pk_organisationchangereqcontents");

                    b.HasIndex("RequestId")
                        .HasDatabaseName("ix_organisationchangereqcontents_requestid");

                    b.ToTable("organisationchangereqcontents", (string)null);
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.OrganisationInfoChangeRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("InsertTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("inserttime");

                    b.Property<long?>("InsertUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("insertuserid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<long>("OrganisationId")
                        .HasColumnType("bigint")
                        .HasColumnName("organisationid");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("requestdate");

                    b.Property<int>("RequestState")
                        .HasColumnType("integer")
                        .HasColumnName("requeststate");

                    b.Property<int>("ResponseState")
                        .HasColumnType("integer")
                        .HasColumnName("responsestate");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatetime");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("updateuserid");

                    b.HasKey("Id")
                        .HasName("pk_organisationinfochangerequests");

                    b.HasIndex("OrganisationId")
                        .HasDatabaseName("ix_organisationinfochangerequests_organisationid");

                    b.ToTable("organisationinfochangerequests", (string)null);
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.OrganisationType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime>("InsertTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("inserttime");

                    b.Property<long?>("InsertUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("insertuserid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<bool>("IsSingularOrganisation")
                        .HasColumnType("boolean")
                        .HasColumnName("issingularorganisation");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer")
                        .HasColumnName("recordstatus");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatetime");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("updateuserid");

                    b.HasKey("Id")
                        .HasName("pk_organisationtype");

                    b.ToTable("organisationtype", (string)null);
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.OrganisationUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("InsertTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("inserttime");

                    b.Property<long?>("InsertUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("insertuserid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<long>("OrganisationId")
                        .HasColumnType("bigint")
                        .HasColumnName("organisationid");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatetime");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("updateuserid");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("pk_organisationuser");

                    b.HasIndex("OrganisationId")
                        .HasDatabaseName("ix_organisationuser_organisationid");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_organisationuser_userid");

                    b.ToTable("organisationuser", (string)null);
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.Package", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("FinishDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("finishdate");

                    b.Property<bool>("HasCoachService")
                        .HasColumnType("boolean")
                        .HasColumnName("hascoachservice");

                    b.Property<bool>("HasMotivationEvent")
                        .HasColumnType("boolean")
                        .HasColumnName("hasmotivationevent");

                    b.Property<bool>("HasTryingTest")
                        .HasColumnType("boolean")
                        .HasColumnName("hastryingtest");

                    b.Property<DateTime>("InsertTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("inserttime");

                    b.Property<long?>("InsertUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("insertuserid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("PackageKind")
                        .HasColumnType("integer")
                        .HasColumnName("packagekind");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("startdate");

                    b.Property<string>("Summary")
                        .HasColumnType("text")
                        .HasColumnName("summary");

                    b.Property<int?>("TryingTestQuestionCount")
                        .HasColumnType("integer")
                        .HasColumnName("tryingtestquestioncount");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatetime");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("updateuserid");

                    b.HasKey("Id")
                        .HasName("pk_package");

                    b.ToTable("package", (string)null);
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.PackageCoachServicePackage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CoachServicePackageId")
                        .HasColumnType("bigint")
                        .HasColumnName("coachservicepackageid");

                    b.Property<DateTime>("InsertTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("inserttime");

                    b.Property<long?>("InsertUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("insertuserid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<long>("PackageId")
                        .HasColumnType("bigint")
                        .HasColumnName("packageid");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatetime");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("updateuserid");

                    b.HasKey("Id")
                        .HasName("pk_packagecoachservicepackages");

                    b.HasIndex("PackageId")
                        .HasDatabaseName("ix_packagecoachservicepackages_packageid");

                    b.ToTable("packagecoachservicepackages", (string)null);
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.PackageContractType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ContractTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("contracttypeid");

                    b.Property<DateTime>("InsertTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("inserttime");

                    b.Property<long?>("InsertUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("insertuserid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<long>("PackageId")
                        .HasColumnType("bigint")
                        .HasColumnName("packageid");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatetime");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("updateuserid");

                    b.HasKey("Id")
                        .HasName("pk_packagecontracttypes");

                    b.HasIndex("ContractTypeId")
                        .HasDatabaseName("ix_packagecontracttypes_contracttypeid");

                    b.HasIndex("PackageId")
                        .HasDatabaseName("ix_packagecontracttypes_packageid");

                    b.ToTable("packagecontracttypes", (string)null);
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.PackageDocument", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("DocumentId")
                        .HasColumnType("bigint")
                        .HasColumnName("documentid");

                    b.Property<DateTime>("InsertTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("inserttime");

                    b.Property<long?>("InsertUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("insertuserid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<long>("PackageId")
                        .HasColumnType("bigint")
                        .HasColumnName("packageid");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatetime");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("updateuserid");

                    b.HasKey("Id")
                        .HasName("pk_packagedocument");

                    b.HasIndex("DocumentId")
                        .HasDatabaseName("ix_packagedocument_documentid");

                    b.HasIndex("PackageId")
                        .HasDatabaseName("ix_packagedocument_packageid");

                    b.ToTable("packagedocument", (string)null);
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.PackageEvent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("EventId")
                        .HasColumnType("bigint")
                        .HasColumnName("eventid");

                    b.Property<DateTime>("InsertTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("inserttime");

                    b.Property<long?>("InsertUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("insertuserid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<long>("PackageId")
                        .HasColumnType("bigint")
                        .HasColumnName("packageid");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatetime");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("updateuserid");

                    b.HasKey("Id")
                        .HasName("pk_packageevent");

                    b.HasIndex("EventId")
                        .HasDatabaseName("ix_packageevent_eventid");

                    b.HasIndex("PackageId")
                        .HasDatabaseName("ix_packageevent_packageid");

                    b.ToTable("packageevent", (string)null);
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.PackageFieldType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("FieldType")
                        .HasColumnType("integer")
                        .HasColumnName("fieldtype");

                    b.Property<DateTime>("InsertTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("inserttime");

                    b.Property<long?>("InsertUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("insertuserid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<long>("PackageId")
                        .HasColumnType("bigint")
                        .HasColumnName("packageid");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatetime");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("updateuserid");

                    b.HasKey("Id")
                        .HasName("pk_packagefieldtype");

                    b.HasIndex("PackageId")
                        .HasDatabaseName("ix_packagefieldtype_packageid");

                    b.ToTable("packagefieldtype", (string)null);
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.PackageLesson", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("InsertTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("inserttime");

                    b.Property<long?>("InsertUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("insertuserid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<long>("LessonId")
                        .HasColumnType("bigint")
                        .HasColumnName("lessonid");

                    b.Property<long>("PackageId")
                        .HasColumnType("bigint")
                        .HasColumnName("packageid");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatetime");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("updateuserid");

                    b.HasKey("Id")
                        .HasName("pk_packagelesson");

                    b.HasIndex("LessonId")
                        .HasDatabaseName("ix_packagelesson_lessonid");

                    b.HasIndex("PackageId")
                        .HasDatabaseName("ix_packagelesson_packageid");

                    b.ToTable("packagelesson", (string)null);
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.PackageMotivationActivityPackage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("InsertTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("inserttime");

                    b.Property<long?>("InsertUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("insertuserid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<long>("MotivationActivityPackageId")
                        .HasColumnType("bigint")
                        .HasColumnName("motivationactivitypackageid");

                    b.Property<long>("PackageId")
                        .HasColumnType("bigint")
                        .HasColumnName("packageid");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatetime");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("updateuserid");

                    b.HasKey("Id")
                        .HasName("pk_packagemotivationactivitypackage");

                    b.HasIndex("PackageId")
                        .HasDatabaseName("ix_packagemotivationactivitypackage_packageid");

                    b.ToTable("packagemotivationactivitypackage", (string)null);
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.PackagePackageTypeEnum", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("InsertTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("inserttime");

                    b.Property<long?>("InsertUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("insertuserid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<long>("PackageId")
                        .HasColumnType("bigint")
                        .HasColumnName("packageid");

                    b.Property<int>("PackageTypeEnum")
                        .HasColumnType("integer")
                        .HasColumnName("packagetypeenum");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatetime");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("updateuserid");

                    b.HasKey("Id")
                        .HasName("pk_packagepackagetypeenum");

                    b.HasIndex("PackageId")
                        .HasDatabaseName("ix_packagepackagetypeenum_packageid");

                    b.ToTable("packagepackagetypeenum", (string)null);
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.PackagePublisher", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("InsertTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("inserttime");

                    b.Property<long?>("InsertUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("insertuserid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<long>("PackageId")
                        .HasColumnType("bigint")
                        .HasColumnName("packageid");

                    b.Property<long>("PublisherId")
                        .HasColumnType("bigint")
                        .HasColumnName("publisherid");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatetime");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("updateuserid");

                    b.HasKey("Id")
                        .HasName("pk_packagepublisher");

                    b.HasIndex("PackageId")
                        .HasDatabaseName("ix_packagepublisher_packageid");

                    b.HasIndex("PublisherId")
                        .HasDatabaseName("ix_packagepublisher_publisherid");

                    b.ToTable("packagepublisher", (string)null);
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.PackageRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("InsertTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("inserttime");

                    b.Property<long?>("InsertUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("insertuserid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<long>("PackageId")
                        .HasColumnType("bigint")
                        .HasColumnName("packageid");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("roleid");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatetime");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("updateuserid");

                    b.HasKey("Id")
                        .HasName("pk_packagerole");

                    b.HasIndex("PackageId")
                        .HasDatabaseName("ix_packagerole_packageid");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_packagerole_roleid");

                    b.ToTable("packagerole", (string)null);
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.PackageTestExam", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("InsertTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("inserttime");

                    b.Property<long?>("InsertUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("insertuserid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<long>("PackageId")
                        .HasColumnType("bigint")
                        .HasColumnName("packageid");

                    b.Property<long>("TestExamId")
                        .HasColumnType("bigint")
                        .HasColumnName("testexamid");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatetime");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("updateuserid");

                    b.HasKey("Id")
                        .HasName("pk_packagetestexam");

                    b.HasIndex("PackageId")
                        .HasDatabaseName("ix_packagetestexam_packageid");

                    b.HasIndex("TestExamId")
                        .HasDatabaseName("ix_packagetestexam_testexamid");

                    b.ToTable("packagetestexam", (string)null);
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.PackageTestExamPackage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("InsertTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("inserttime");

                    b.Property<long?>("InsertUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("insertuserid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<long>("PackageId")
                        .HasColumnType("bigint")
                        .HasColumnName("packageid");

                    b.Property<long>("TestExamPackageId")
                        .HasColumnType("bigint")
                        .HasColumnName("testexampackageid");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatetime");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("updateuserid");

                    b.HasKey("Id")
                        .HasName("pk_packagetestexampackage");

                    b.HasIndex("PackageId")
                        .HasDatabaseName("ix_packagetestexampackage_packageid");

                    b.ToTable("packagetestexampackage", (string)null);
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.PackageType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("InsertTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("inserttime");

                    b.Property<long?>("InsertUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("insertuserid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<bool>("IsCanSeeTargetScreen")
                        .HasColumnType("boolean")
                        .HasColumnName("iscanseetargetscreen");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatetime");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("updateuserid");

                    b.HasKey("Id")
                        .HasName("pk_packagetype");

                    b.ToTable("packagetype", (string)null);
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.PackageTypeTargetScreen", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("InsertTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("inserttime");

                    b.Property<long?>("InsertUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("insertuserid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<long>("PackageTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("packagetypeid");

                    b.Property<long>("TargetScreenId")
                        .HasColumnType("bigint")
                        .HasColumnName("targetscreenid");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatetime");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("updateuserid");

                    b.HasKey("Id")
                        .HasName("pk_packagetypetargetscreen");

                    b.HasIndex("PackageTypeId")
                        .HasDatabaseName("ix_packagetypetargetscreen_packagetypeid");

                    b.HasIndex("TargetScreenId")
                        .HasDatabaseName("ix_packagetypetargetscreen_targetscreenid");

                    b.ToTable("packagetypetargetscreen", (string)null);
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.Parent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ContactOption")
                        .HasColumnType("text")
                        .HasColumnName("contactoption");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<DateTime>("InsertTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("inserttime");

                    b.Property<long?>("InsertUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("insertuserid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("NameSurname")
                        .HasColumnType("text")
                        .HasColumnName("namesurname");

                    b.Property<bool>("NotificationStatus")
                        .HasColumnType("boolean")
                        .HasColumnName("notificationstatus");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("bytea")
                        .HasColumnName("passwordhash");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("bytea")
                        .HasColumnName("passwordsalt");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<long>("Tc")
                        .HasColumnType("bigint")
                        .HasColumnName("tc");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatetime");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("updateuserid");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("pk_parent");

                    b.ToTable("parent", (string)null);
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.ReadOnly.BranchMainField", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long?>("OrganisationId")
                        .HasColumnType("bigint")
                        .HasColumnName("organisationid");

                    b.HasKey("Id")
                        .HasName("pk_branchmainfield");

                    b.HasIndex("OrganisationId")
                        .HasDatabaseName("ix_branchmainfield_organisationid");

                    b.ToTable("branchmainfield", (string)null);
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.ReadOnly.Classroom", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("isactive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_classroom");

                    b.ToTable("classroom", (string)null);
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.ReadOnly.Event", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("description");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("enddate");

                    b.Property<int>("EventTypeEnum")
                        .HasColumnType("integer")
                        .HasColumnName("eventtypeenum");

                    b.Property<long?>("FormId")
                        .HasColumnType("bigint")
                        .HasColumnName("formid");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("isactive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<bool>("IsDraft")
                        .HasColumnType("boolean")
                        .HasColumnName("isdraft");

                    b.Property<bool>("IsPublised")
                        .HasColumnType("boolean")
                        .HasColumnName("ispublised");

                    b.Property<string>("KeyWords")
                        .HasColumnType("text")
                        .HasColumnName("keywords");

                    b.Property<int>("LocationType")
                        .HasColumnType("integer")
                        .HasColumnName("locationtype");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("PhysicalAddress")
                        .HasColumnType("text")
                        .HasColumnName("physicaladdress");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("startdate");

                    b.HasKey("Id")
                        .HasName("pk_event");

                    b.ToTable("event", (string)null);
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.ReadOnly.File", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ContentType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("contenttype");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("description");

                    b.Property<string>("FileName")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("filename");

                    b.Property<string>("FilePath")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("filepath");

                    b.Property<int>("FileType")
                        .HasColumnType("integer")
                        .HasColumnName("filetype");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.HasKey("Id")
                        .HasName("pk_file");

                    b.ToTable("file", (string)null);
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.ReadOnly.Lesson", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ClassroomId")
                        .HasColumnType("bigint")
                        .HasColumnName("classroomid");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("isactive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("Name")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("name");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.HasKey("Id")
                        .HasName("pk_lesson");

                    b.HasIndex("ClassroomId")
                        .HasDatabaseName("ix_lesson_classroomid");

                    b.ToTable("lesson", (string)null);
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.ReadOnly.Publisher", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer")
                        .HasColumnName("recordstatus");

                    b.HasKey("Id")
                        .HasName("pk_publisher");

                    b.ToTable("publisher", (string)null);
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.ReadOnly.TestExam", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ClassroomId")
                        .HasColumnType("bigint")
                        .HasColumnName("classroomid");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<int>("Difficulty")
                        .HasColumnType("integer")
                        .HasColumnName("difficulty");

                    b.Property<int?>("ExamType")
                        .HasColumnType("integer")
                        .HasColumnName("examtype");

                    b.Property<DateTime>("FinishDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("finishdate");

                    b.Property<bool>("IsAllowDownloadPdf")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isallowdownloadpdf");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<bool>("IsLiveTestExam")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("islivetestexam");

                    b.Property<string>("KeyWords")
                        .HasColumnType("text")
                        .HasColumnName("keywords");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer")
                        .HasColumnName("recordstatus");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("startdate");

                    b.Property<int>("TestExamStatus")
                        .HasColumnType("integer")
                        .HasColumnName("testexamstatus");

                    b.Property<int>("TestExamTime")
                        .HasColumnType("integer")
                        .HasColumnName("testexamtime");

                    b.Property<long>("TestExamTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("testexamtypeid");

                    b.Property<bool>("TransitionBetweenQuestions")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("transitionbetweenquestions");

                    b.Property<bool>("TransitionBetweenSections")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("transitionbetweensections");

                    b.HasKey("Id")
                        .HasName("pk_testexam");

                    b.HasIndex("ClassroomId")
                        .HasDatabaseName("ix_testexam_classroomid");

                    b.HasIndex("TestExamTypeId")
                        .HasDatabaseName("ix_testexam_testexamtypeid");

                    b.ToTable("testexam", (string)null);
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.ReadOnly.TestExamType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isactive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_testexamtype");

                    b.ToTable("testexamtype", (string)null);
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime>("InsertTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("inserttime");

                    b.Property<long?>("InsertUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("insertuserid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<bool>("IsOrganisationView")
                        .HasColumnType("boolean")
                        .HasColumnName("isorganisationview");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer")
                        .HasColumnName("recordstatus");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatetime");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("updateuserid");

                    b.Property<int>("UserType")
                        .HasColumnType("integer")
                        .HasColumnName("usertype");

                    b.HasKey("Id")
                        .HasName("pk_role");

                    b.ToTable("role", (string)null);
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.RoleClaim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ClaimName")
                        .HasColumnType("text")
                        .HasColumnName("claimname");

                    b.Property<DateTime>("InsertTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("inserttime");

                    b.Property<long?>("InsertUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("insertuserid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("roleid");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatetime");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("updateuserid");

                    b.HasKey("Id")
                        .HasName("pk_roleclaim");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_roleclaim_roleid");

                    b.ToTable("roleclaim", (string)null);
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.School", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CityId")
                        .HasColumnType("bigint")
                        .HasColumnName("cityid");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<long?>("CountyId")
                        .HasColumnType("bigint")
                        .HasColumnName("countyid");

                    b.Property<DateTime>("InsertTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("inserttime");

                    b.Property<long?>("InsertUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("insertuserid");

                    b.Property<long?>("InstitutionId")
                        .HasColumnType("bigint")
                        .HasColumnName("institutionid");

                    b.Property<long?>("InstitutionTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("institutiontypeid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer")
                        .HasColumnName("recordstatus");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatetime");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("updateuserid");

                    b.HasKey("Id")
                        .HasName("pk_school");

                    b.HasIndex("CityId")
                        .HasDatabaseName("ix_school_cityid");

                    b.HasIndex("CountyId")
                        .HasDatabaseName("ix_school_countyid");

                    b.HasIndex("InstitutionId")
                        .HasDatabaseName("ix_school_institutionid");

                    b.HasIndex("InstitutionTypeId")
                        .HasDatabaseName("ix_school_institutiontypeid");

                    b.ToTable("school", (string)null);
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.StudentAnswerTargetRange", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("InsertTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("inserttime");

                    b.Property<long?>("InsertUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("insertuserid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<long>("PackageId")
                        .HasColumnType("bigint")
                        .HasColumnName("packageid");

                    b.Property<decimal>("TargetRangeMax")
                        .HasColumnType("numeric")
                        .HasColumnName("targetrangemax");

                    b.Property<decimal>("TargetRangeMin")
                        .HasColumnType("numeric")
                        .HasColumnName("targetrangemin");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatetime");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("updateuserid");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("pk_studentanswertargetrange");

                    b.HasIndex("PackageId")
                        .HasDatabaseName("ix_studentanswertargetrange_packageid");

                    b.ToTable("studentanswertargetrange", (string)null);
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.StudentEducationInformation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CityId")
                        .HasColumnType("bigint")
                        .HasColumnName("cityid");

                    b.Property<long?>("ClassroomId")
                        .HasColumnType("bigint")
                        .HasColumnName("classroomid");

                    b.Property<long>("CountyId")
                        .HasColumnType("bigint")
                        .HasColumnName("countyid");

                    b.Property<double?>("DiplomaGrade")
                        .HasColumnType("double precision")
                        .HasColumnName("diplomagrade");

                    b.Property<int>("ExamType")
                        .HasColumnType("integer")
                        .HasColumnName("examtype");

                    b.Property<int?>("FieldType")
                        .HasColumnType("integer")
                        .HasColumnName("fieldtype");

                    b.Property<long?>("GraduationYearId")
                        .HasColumnType("bigint")
                        .HasColumnName("graduationyearid");

                    b.Property<DateTime>("InsertTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("inserttime");

                    b.Property<long?>("InsertUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("insertuserid");

                    b.Property<long>("InstitutionId")
                        .HasColumnType("bigint")
                        .HasColumnName("institutionid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<bool?>("IsGraduate")
                        .HasColumnType("boolean")
                        .HasColumnName("isgraduate");

                    b.Property<int?>("PointType")
                        .HasColumnType("integer")
                        .HasColumnName("pointtype");

                    b.Property<bool?>("ReligionLessonStatus")
                        .HasColumnType("boolean")
                        .HasColumnName("religionlessonstatus");

                    b.Property<long>("SchoolId")
                        .HasColumnType("bigint")
                        .HasColumnName("schoolid");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatetime");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("updateuserid");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("userid");

                    b.Property<int?>("YKSStatement")
                        .HasColumnType("integer")
                        .HasColumnName("yksstatement");

                    b.HasKey("Id")
                        .HasName("pk_studenteducationinformation");

                    b.HasIndex("CityId")
                        .HasDatabaseName("ix_studenteducationinformation_cityid");

                    b.HasIndex("ClassroomId")
                        .HasDatabaseName("ix_studenteducationinformation_classroomid");

                    b.HasIndex("CountyId")
                        .HasDatabaseName("ix_studenteducationinformation_countyid");

                    b.HasIndex("GraduationYearId")
                        .HasDatabaseName("ix_studenteducationinformation_graduationyearid");

                    b.HasIndex("InstitutionId")
                        .HasDatabaseName("ix_studenteducationinformation_institutionid");

                    b.HasIndex("SchoolId")
                        .HasDatabaseName("ix_studenteducationinformation_schoolid");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_studenteducationinformation_userid");

                    b.ToTable("studenteducationinformation", (string)null);
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.StudentParentInformation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CitizenId")
                        .HasColumnType("text")
                        .HasColumnName("citizenid");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<DateTime>("InsertTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("inserttime");

                    b.Property<long?>("InsertUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("insertuserid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("MobilPhones")
                        .HasColumnType("text")
                        .HasColumnName("mobilphones");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("SurName")
                        .HasColumnType("text")
                        .HasColumnName("surname");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatetime");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("updateuserid");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("pk_studentparentinformation");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_studentparentinformation_userid");

                    b.ToTable("studentparentinformation", (string)null);
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.TargetScreen", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("InsertTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("inserttime");

                    b.Property<long?>("InsertUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("insertuserid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PageName")
                        .HasColumnType("text")
                        .HasColumnName("pagename");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatetime");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("updateuserid");

                    b.HasKey("Id")
                        .HasName("pk_targetscreen");

                    b.ToTable("targetscreen", (string)null);
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.UnverifiedUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CitizenId")
                        .HasColumnType("bigint")
                        .HasColumnName("citizenid");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<DateTime>("InsertTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("inserttime");

                    b.Property<long?>("InsertUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("insertuserid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("MobilePhones")
                        .HasColumnType("text")
                        .HasColumnName("mobilephones");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("bytea")
                        .HasColumnName("passwordhash");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("bytea")
                        .HasColumnName("passwordsalt");

                    b.Property<string>("SurName")
                        .HasColumnType("text")
                        .HasColumnName("surname");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatetime");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("updateuserid");

                    b.Property<int>("UserTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("usertypeid");

                    b.Property<string>("VerificationKey")
                        .HasColumnType("text")
                        .HasColumnName("verificationkey");

                    b.Property<DateTime>("VerificationKeyLastTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("verificationkeylasttime");

                    b.HasKey("Id")
                        .HasName("pk_unverifieduser");

                    b.ToTable("unverifieduser", (string)null);
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AddingType")
                        .HasColumnType("integer")
                        .HasColumnName("addingtype");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("address");

                    b.Property<long>("AvatarId")
                        .HasColumnType("bigint")
                        .HasColumnName("avatarid");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("birthdate");

                    b.Property<string>("BirthPlace")
                        .HasColumnType("text")
                        .HasColumnName("birthplace");

                    b.Property<long?>("CitizenId")
                        .HasColumnType("bigint")
                        .HasColumnName("citizenid");

                    b.Property<bool>("ContactByCall")
                        .HasColumnType("boolean")
                        .HasColumnName("contactbycall");

                    b.Property<bool>("ContactByMail")
                        .HasColumnType("boolean")
                        .HasColumnName("contactbymail");

                    b.Property<bool>("ContactBySMS")
                        .HasColumnType("boolean")
                        .HasColumnName("contactbysms");

                    b.Property<string>("ContactOption")
                        .HasColumnType("text")
                        .HasColumnName("contactoption");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailVerify")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("emailverify");

                    b.Property<int?>("FailLoginCount")
                        .HasColumnType("integer")
                        .HasColumnName("faillogincount");

                    b.Property<int?>("FailOtpCount")
                        .HasColumnType("integer")
                        .HasColumnName("failotpcount");

                    b.Property<int>("GenderId")
                        .HasColumnType("integer")
                        .HasColumnName("genderid");

                    b.Property<DateTime>("InsertTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("inserttime");

                    b.Property<long?>("InsertUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("insertuserid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<long?>("LastMobileSessionId")
                        .HasColumnType("bigint")
                        .HasColumnName("lastmobilesessionid");

                    b.Property<DateTime?>("LastMobileSessionTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lastmobilesessiontime");

                    b.Property<DateTime?>("LastPasswordChangeExpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lastpasswordchangeexptime");

                    b.Property<string>("LastPasswordChangeGuid")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("lastpasswordchangeguid");

                    b.Property<DateTime>("LastPasswordDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lastpassworddate");

                    b.Property<long?>("LastWebSessionId")
                        .HasColumnType("bigint")
                        .HasColumnName("lastwebsessionid");

                    b.Property<DateTime?>("LastWebSessionTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lastwebsessiontime");

                    b.Property<string>("MobilePhones")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("mobilephones");

                    b.Property<bool>("MobilePhonesVerify")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("mobilephonesverify");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("NameSurname")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("namesurname");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("notes");

                    b.Property<string>("OAuthAccessToken")
                        .HasMaxLength(2500)
                        .HasColumnType("character varying(2500)")
                        .HasColumnName("oauthaccesstoken");

                    b.Property<string>("OAuthOpenIdConnectToken")
                        .HasColumnType("text")
                        .HasColumnName("oauthopenidconnecttoken");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("bytea")
                        .HasColumnName("passwordhash");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("bytea")
                        .HasColumnName("passwordsalt");

                    b.Property<DateTime>("RecordDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("recorddate");

                    b.Property<int>("RegisterStatus")
                        .HasColumnType("integer")
                        .HasColumnName("registerstatus");

                    b.Property<string>("RelatedIdentity")
                        .HasMaxLength(2500)
                        .HasColumnType("character varying(2500)")
                        .HasColumnName("relatedidentity");

                    b.Property<bool>("RemindLater")
                        .HasColumnType("boolean")
                        .HasColumnName("remindlater");

                    b.Property<long?>("ResidenceCityId")
                        .HasColumnType("bigint")
                        .HasColumnName("residencecityid");

                    b.Property<long?>("ResidenceCountyId")
                        .HasColumnType("bigint")
                        .HasColumnName("residencecountyid");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean")
                        .HasColumnName("status");

                    b.Property<string>("SurName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("surname");

                    b.Property<DateTime>("UpdateContactDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatecontactdate");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatetime");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("updateuserid");

                    b.Property<Guid>("UserCode")
                        .HasColumnType("uuid")
                        .HasColumnName("usercode");

                    b.Property<string>("UserName")
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.Property<int>("UserType")
                        .HasColumnType("integer")
                        .HasColumnName("usertype");

                    b.Property<bool>("ViewMyData")
                        .HasColumnType("boolean")
                        .HasColumnName("viewmydata");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("CitizenId")
                        .IsUnique()
                        .HasDatabaseName("ix_users_citizenid");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.HasIndex("MobilePhones")
                        .HasDatabaseName("ix_users_mobilephones");

                    b.HasIndex("RelatedIdentity")
                        .IsUnique()
                        .HasDatabaseName("ix_users_relatedidentity");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.UserBasketPackage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("InsertTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("inserttime");

                    b.Property<long?>("InsertUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("insertuserid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<long>("PackageId")
                        .HasColumnType("bigint")
                        .HasColumnName("packageid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatetime");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("updateuserid");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("pk_userbasketpackages");

                    b.HasIndex("PackageId")
                        .HasDatabaseName("ix_userbasketpackages_packageid");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_userbasketpackages_userid");

                    b.ToTable("userbasketpackages", (string)null);
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.UserCommunicationPreferences", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("InsertTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("inserttime");

                    b.Property<long?>("InsertUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("insertuserid");

                    b.Property<bool?>("IsCall")
                        .HasColumnType("boolean")
                        .HasColumnName("iscall");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<bool?>("IsEMail")
                        .HasColumnType("boolean")
                        .HasColumnName("isemail");

                    b.Property<bool?>("IsNotification")
                        .HasColumnType("boolean")
                        .HasColumnName("isnotification");

                    b.Property<bool?>("IsSms")
                        .HasColumnType("boolean")
                        .HasColumnName("issms");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatetime");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("updateuserid");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("pk_usercommunicationpreferences");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_usercommunicationpreferences_userid");

                    b.ToTable("usercommunicationpreferences", (string)null);
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.UserContrat", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("AcceptedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("accepteddate");

                    b.Property<long>("DocumentId")
                        .HasColumnType("bigint")
                        .HasColumnName("documentid");

                    b.Property<DateTime>("InsertTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("inserttime");

                    b.Property<long?>("InsertUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("insertuserid");

                    b.Property<bool?>("IsAccepted")
                        .HasColumnType("boolean")
                        .HasColumnName("isaccepted");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<bool>("IsLastVersion")
                        .HasColumnType("boolean")
                        .HasColumnName("islastversion");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatetime");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("updateuserid");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("pk_usercontrat");

                    b.HasIndex("DocumentId")
                        .HasDatabaseName("ix_usercontrat_documentid");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_usercontrat_userid");

                    b.ToTable("usercontrat", (string)null);
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.UserPackage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("InsertTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("inserttime");

                    b.Property<long?>("InsertUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("insertuserid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<long>("PackageId")
                        .HasColumnType("bigint")
                        .HasColumnName("packageid");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("purchasedate");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatetime");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("updateuserid");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("pk_userpackage");

                    b.HasIndex("PackageId")
                        .HasDatabaseName("ix_userpackage_packageid");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_userpackage_userid");

                    b.ToTable("userpackage", (string)null);
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.UserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("InsertTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("inserttime");

                    b.Property<long?>("InsertUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("insertuserid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<long?>("PackageId")
                        .HasColumnType("bigint")
                        .HasColumnName("packageid");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("roleid");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatetime");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("updateuserid");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("pk_userrole");

                    b.HasIndex("PackageId")
                        .HasDatabaseName("ix_userrole_packageid");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_userrole_roleid");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_userrole_userid");

                    b.ToTable("userrole", (string)null);
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.UserSession", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("DeviceInfo")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("deviceinfo");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("endtime");

                    b.Property<DateTime>("InsertTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("inserttime");

                    b.Property<long?>("InsertUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("insertuserid");

                    b.Property<string>("IpAdress")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("ipadress");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<DateTime>("LastTokenDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lasttokendate");

                    b.Property<int>("NotBefore")
                        .HasColumnType("integer")
                        .HasColumnName("notbefore");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("refreshtoken");

                    b.Property<int>("SessionType")
                        .HasColumnType("integer")
                        .HasColumnName("sessiontype");

                    b.Property<DateTime>("StartTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("starttime")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatetime");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("updateuserid");

                    b.Property<long?>("UserId")
                        .IsRequired()
                        .HasColumnType("bigint")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("pk_usersessions");

                    b.HasIndex("StartTime")
                        .HasDatabaseName("ix_usersessions_starttime");

                    b.HasIndex("UserId", "SessionType", "EndTime")
                        .HasDatabaseName("ix_usersessions_userid_sessiontype_endtime");

                    b.ToTable("usersessions", (string)null);
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.UserSupportTeamViewMyData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("InsertTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("inserttime");

                    b.Property<long?>("InsertUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("insertuserid");

                    b.Property<bool?>("IsAlways")
                        .HasColumnType("boolean")
                        .HasColumnName("isalways");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<bool?>("IsFifteenMinutes")
                        .HasColumnType("boolean")
                        .HasColumnName("isfifteenminutes");

                    b.Property<bool?>("IsOneMonth")
                        .HasColumnType("boolean")
                        .HasColumnName("isonemonth");

                    b.Property<bool>("IsViewMyData")
                        .HasColumnType("boolean")
                        .HasColumnName("isviewmydata");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatetime");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("updateuserid");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("pk_usersupportteamviewmydata");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_usersupportteamviewmydata_userid");

                    b.ToTable("usersupportteamviewmydata", (string)null);
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.ContractKind", b =>
                {
                    b.HasOne("TurkcellDigitalSchool.Account.Domain.Concrete.ContractType", "ContractType")
                        .WithMany()
                        .HasForeignKey("ContractTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_contractkind_contracttypes_contracttypeid");

                    b.Navigation("ContractType");
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.County", b =>
                {
                    b.HasOne("TurkcellDigitalSchool.Account.Domain.Concrete.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_county_city_cityid");

                    b.Navigation("City");
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.Document", b =>
                {
                    b.HasOne("TurkcellDigitalSchool.Account.Domain.Concrete.ContractKind", "ContractKind")
                        .WithMany()
                        .HasForeignKey("ContractKindId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_document_contractkind_contractkindid");

                    b.Navigation("ContractKind");
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.DocumentContractType", b =>
                {
                    b.HasOne("TurkcellDigitalSchool.Account.Domain.Concrete.ContractType", "ContractType")
                        .WithMany()
                        .HasForeignKey("ContractTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_documentcontracttype_contracttype_contracttypeid");

                    b.HasOne("TurkcellDigitalSchool.Account.Domain.Concrete.Document", null)
                        .WithMany("ContractTypes")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_documentcontracttype_documents_documentid");

                    b.Navigation("ContractType");
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.ImageOfPackage", b =>
                {
                    b.HasOne("TurkcellDigitalSchool.Account.Domain.Concrete.ReadOnly.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_imageofpackage_files_fileid");

                    b.HasOne("TurkcellDigitalSchool.Account.Domain.Concrete.Package", "Package")
                        .WithMany("ImageOfPackages")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_imageofpackage_packages_packageid");

                    b.Navigation("File");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.Message", b =>
                {
                    b.HasOne("TurkcellDigitalSchool.Account.Domain.Concrete.MessageType", "MessageType")
                        .WithMany()
                        .HasForeignKey("MessageTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_message_messagetypes_messagetypeid");

                    b.Navigation("MessageType");
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.Organisation", b =>
                {
                    b.HasOne("TurkcellDigitalSchool.Account.Domain.Concrete.OrganisationType", "OrganisationType")
                        .WithMany()
                        .HasForeignKey("OrganisationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_organisation_organisationtypes_organisationtypeid");

                    b.Navigation("OrganisationType");
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.OrganisationChangeReqContent", b =>
                {
                    b.HasOne("TurkcellDigitalSchool.Account.Domain.Concrete.OrganisationInfoChangeRequest", "Request")
                        .WithMany("OrganisationChangeReqContents")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_organisationchangereqcontents_organisationinfochangerequest~");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.OrganisationInfoChangeRequest", b =>
                {
                    b.HasOne("TurkcellDigitalSchool.Account.Domain.Concrete.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_organisationinfochangerequests_organisations_organisationid");

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.OrganisationUser", b =>
                {
                    b.HasOne("TurkcellDigitalSchool.Account.Domain.Concrete.Organisation", "Organisation")
                        .WithMany("OrganisationUsers")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_organisationuser_organisation_organisationid");

                    b.HasOne("TurkcellDigitalSchool.Account.Domain.Concrete.User", "User")
                        .WithMany("OrganisationUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_organisationuser_users_userid");

                    b.Navigation("Organisation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.PackageCoachServicePackage", b =>
                {
                    b.HasOne("TurkcellDigitalSchool.Account.Domain.Concrete.Package", "Package")
                        .WithMany("CoachServicePackages")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_packagecoachservicepackages_packages_packageid");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.PackageContractType", b =>
                {
                    b.HasOne("TurkcellDigitalSchool.Account.Domain.Concrete.ContractType", "ContractType")
                        .WithMany()
                        .HasForeignKey("ContractTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_packagecontracttypes_contracttypes_contracttypeid");

                    b.HasOne("TurkcellDigitalSchool.Account.Domain.Concrete.Package", "Package")
                        .WithMany("PackageContractTypes")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_packagecontracttypes_packages_packageid");

                    b.Navigation("ContractType");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.PackageDocument", b =>
                {
                    b.HasOne("TurkcellDigitalSchool.Account.Domain.Concrete.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_packagedocument_documents_documentid");

                    b.HasOne("TurkcellDigitalSchool.Account.Domain.Concrete.Package", "Package")
                        .WithMany("PackageDocuments")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_packagedocument_packages_packageid");

                    b.Navigation("Document");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.PackageEvent", b =>
                {
                    b.HasOne("TurkcellDigitalSchool.Account.Domain.Concrete.ReadOnly.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_packageevent_events_eventid");

                    b.HasOne("TurkcellDigitalSchool.Account.Domain.Concrete.Package", "Package")
                        .WithMany("PackageEvents")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_packageevent_package_packageid");

                    b.Navigation("Event");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.PackageFieldType", b =>
                {
                    b.HasOne("TurkcellDigitalSchool.Account.Domain.Concrete.Package", "Package")
                        .WithMany("PackageFieldTypes")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_packagefieldtype_packages_packageid");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.PackageLesson", b =>
                {
                    b.HasOne("TurkcellDigitalSchool.Account.Domain.Concrete.ReadOnly.Lesson", "Lesson")
                        .WithMany()
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_packagelesson_lessons_lessonid");

                    b.HasOne("TurkcellDigitalSchool.Account.Domain.Concrete.Package", "Package")
                        .WithMany("PackageLessons")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_packagelesson_package_packageid");

                    b.Navigation("Lesson");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.PackageMotivationActivityPackage", b =>
                {
                    b.HasOne("TurkcellDigitalSchool.Account.Domain.Concrete.Package", "Package")
                        .WithMany("MotivationActivityPackages")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_packagemotivationactivitypackage_package_packageid");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.PackagePackageTypeEnum", b =>
                {
                    b.HasOne("TurkcellDigitalSchool.Account.Domain.Concrete.Package", "Package")
                        .WithMany("PackagePackageTypeEnums")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_packagepackagetypeenum_package_packageid");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.PackagePublisher", b =>
                {
                    b.HasOne("TurkcellDigitalSchool.Account.Domain.Concrete.Package", "Package")
                        .WithMany("PackagePublishers")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_packagepublisher_package_packageid");

                    b.HasOne("TurkcellDigitalSchool.Account.Domain.Concrete.ReadOnly.Publisher", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_packagepublisher_publishers_publisherid");

                    b.Navigation("Package");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.PackageRole", b =>
                {
                    b.HasOne("TurkcellDigitalSchool.Account.Domain.Concrete.Package", "Package")
                        .WithMany("PackageRoles")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_packagerole_package_packageid");

                    b.HasOne("TurkcellDigitalSchool.Account.Domain.Concrete.Role", "Role")
                        .WithMany("PackageRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_packagerole_roles_roleid");

                    b.Navigation("Package");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.PackageTestExam", b =>
                {
                    b.HasOne("TurkcellDigitalSchool.Account.Domain.Concrete.Package", "Package")
                        .WithMany("PackageTestExams")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_packagetestexam_package_packageid");

                    b.HasOne("TurkcellDigitalSchool.Account.Domain.Concrete.ReadOnly.TestExam", "TestExam")
                        .WithMany("PackageTestExams")
                        .HasForeignKey("TestExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_packagetestexam_testexams_testexamid");

                    b.Navigation("Package");

                    b.Navigation("TestExam");
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.PackageTestExamPackage", b =>
                {
                    b.HasOne("TurkcellDigitalSchool.Account.Domain.Concrete.Package", "Package")
                        .WithMany("TestExamPackages")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_packagetestexampackage_package_packageid");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.PackageTypeTargetScreen", b =>
                {
                    b.HasOne("TurkcellDigitalSchool.Account.Domain.Concrete.PackageType", "PackageType")
                        .WithMany("PackageTypeTargetScreens")
                        .HasForeignKey("PackageTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_packagetypetargetscreen_packagetype_packagetypeid");

                    b.HasOne("TurkcellDigitalSchool.Account.Domain.Concrete.TargetScreen", "TargetScreen")
                        .WithMany()
                        .HasForeignKey("TargetScreenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_packagetypetargetscreen_targetscreens_targetscreenid");

                    b.Navigation("PackageType");

                    b.Navigation("TargetScreen");
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.ReadOnly.BranchMainField", b =>
                {
                    b.HasOne("TurkcellDigitalSchool.Account.Domain.Concrete.Organisation", "Organisation")
                        .WithMany("BranchMainFields")
                        .HasForeignKey("OrganisationId")
                        .HasConstraintName("fk_branchmainfield_organisation_organisationid");

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.ReadOnly.Lesson", b =>
                {
                    b.HasOne("TurkcellDigitalSchool.Account.Domain.Concrete.ReadOnly.Classroom", "Classroom")
                        .WithMany("Lessons")
                        .HasForeignKey("ClassroomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_lesson_classroom_classroomid");

                    b.Navigation("Classroom");
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.ReadOnly.TestExam", b =>
                {
                    b.HasOne("TurkcellDigitalSchool.Account.Domain.Concrete.ReadOnly.Classroom", "Classroom")
                        .WithMany()
                        .HasForeignKey("ClassroomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_testexam_classroom_classroomid");

                    b.HasOne("TurkcellDigitalSchool.Account.Domain.Concrete.ReadOnly.TestExamType", "TestExamType")
                        .WithMany()
                        .HasForeignKey("TestExamTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_testexam_testexamtypes_testexamtypeid");

                    b.Navigation("Classroom");

                    b.Navigation("TestExamType");
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.RoleClaim", b =>
                {
                    b.HasOne("TurkcellDigitalSchool.Account.Domain.Concrete.Role", null)
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_roleclaim_roles_roleid");
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.School", b =>
                {
                    b.HasOne("TurkcellDigitalSchool.Account.Domain.Concrete.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .HasConstraintName("fk_school_city_cityid");

                    b.HasOne("TurkcellDigitalSchool.Account.Domain.Concrete.County", "County")
                        .WithMany()
                        .HasForeignKey("CountyId")
                        .HasConstraintName("fk_school_county_countyid");

                    b.HasOne("TurkcellDigitalSchool.Account.Domain.Concrete.Institution", "Institution")
                        .WithMany()
                        .HasForeignKey("InstitutionId")
                        .HasConstraintName("fk_school_institution_institutionid");

                    b.HasOne("TurkcellDigitalSchool.Account.Domain.Concrete.InstitutionType", "InstitutionType")
                        .WithMany()
                        .HasForeignKey("InstitutionTypeId")
                        .HasConstraintName("fk_school_institutiontype_institutiontypeid");

                    b.Navigation("City");

                    b.Navigation("County");

                    b.Navigation("Institution");

                    b.Navigation("InstitutionType");
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.StudentAnswerTargetRange", b =>
                {
                    b.HasOne("TurkcellDigitalSchool.Account.Domain.Concrete.Package", "Package")
                        .WithMany()
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_studentanswertargetrange_package_packageid");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.StudentEducationInformation", b =>
                {
                    b.HasOne("TurkcellDigitalSchool.Account.Domain.Concrete.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_studenteducationinformation_city_cityid");

                    b.HasOne("TurkcellDigitalSchool.Account.Domain.Concrete.ReadOnly.Classroom", "Classroom")
                        .WithMany()
                        .HasForeignKey("ClassroomId")
                        .HasConstraintName("fk_studenteducationinformation_classrooms_classroomid");

                    b.HasOne("TurkcellDigitalSchool.Account.Domain.Concrete.County", "County")
                        .WithMany()
                        .HasForeignKey("CountyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_studenteducationinformation_county_countyid");

                    b.HasOne("TurkcellDigitalSchool.Account.Domain.Concrete.GraduationYear", "GraduationYear")
                        .WithMany()
                        .HasForeignKey("GraduationYearId")
                        .HasConstraintName("fk_studenteducationinformation_graduationyear_graduationyearid");

                    b.HasOne("TurkcellDigitalSchool.Account.Domain.Concrete.Institution", "Institution")
                        .WithMany()
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_studenteducationinformation_institution_institutionid");

                    b.HasOne("TurkcellDigitalSchool.Account.Domain.Concrete.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_studenteducationinformation_school_schoolid");

                    b.HasOne("TurkcellDigitalSchool.Account.Domain.Concrete.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_studenteducationinformation_users_userid");

                    b.Navigation("City");

                    b.Navigation("Classroom");

                    b.Navigation("County");

                    b.Navigation("GraduationYear");

                    b.Navigation("Institution");

                    b.Navigation("School");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.StudentParentInformation", b =>
                {
                    b.HasOne("TurkcellDigitalSchool.Account.Domain.Concrete.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_studentparentinformation_users_userid");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.UserBasketPackage", b =>
                {
                    b.HasOne("TurkcellDigitalSchool.Account.Domain.Concrete.Package", "Package")
                        .WithMany()
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_userbasketpackages_packages_packageid");

                    b.HasOne("TurkcellDigitalSchool.Account.Domain.Concrete.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_userbasketpackages_users_userid");

                    b.Navigation("Package");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.UserCommunicationPreferences", b =>
                {
                    b.HasOne("TurkcellDigitalSchool.Account.Domain.Concrete.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_usercommunicationpreferences_users_userid");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.UserContrat", b =>
                {
                    b.HasOne("TurkcellDigitalSchool.Account.Domain.Concrete.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_usercontrat_document_documentid");

                    b.HasOne("TurkcellDigitalSchool.Account.Domain.Concrete.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_usercontrat_users_userid");

                    b.Navigation("Document");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.UserPackage", b =>
                {
                    b.HasOne("TurkcellDigitalSchool.Account.Domain.Concrete.Package", "Package")
                        .WithMany()
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_userpackage_package_packageid");

                    b.HasOne("TurkcellDigitalSchool.Account.Domain.Concrete.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_userpackage_users_userid");

                    b.Navigation("Package");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.UserRole", b =>
                {
                    b.HasOne("TurkcellDigitalSchool.Account.Domain.Concrete.Package", "Package")
                        .WithMany()
                        .HasForeignKey("PackageId")
                        .HasConstraintName("fk_userrole_package_packageid");

                    b.HasOne("TurkcellDigitalSchool.Account.Domain.Concrete.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_userrole_role_roleid");

                    b.HasOne("TurkcellDigitalSchool.Account.Domain.Concrete.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_userrole_users_userid");

                    b.Navigation("Package");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.UserSession", b =>
                {
                    b.HasOne("TurkcellDigitalSchool.Account.Domain.Concrete.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_usersessions_users_userid");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.UserSupportTeamViewMyData", b =>
                {
                    b.HasOne("TurkcellDigitalSchool.Account.Domain.Concrete.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_usersupportteamviewmydata_users_userid");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.Document", b =>
                {
                    b.Navigation("ContractTypes");
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.Organisation", b =>
                {
                    b.Navigation("BranchMainFields");

                    b.Navigation("OrganisationUsers");
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.OrganisationInfoChangeRequest", b =>
                {
                    b.Navigation("OrganisationChangeReqContents");
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.Package", b =>
                {
                    b.Navigation("CoachServicePackages");

                    b.Navigation("ImageOfPackages");

                    b.Navigation("MotivationActivityPackages");

                    b.Navigation("PackageContractTypes");

                    b.Navigation("PackageDocuments");

                    b.Navigation("PackageEvents");

                    b.Navigation("PackageFieldTypes");

                    b.Navigation("PackageLessons");

                    b.Navigation("PackagePackageTypeEnums");

                    b.Navigation("PackagePublishers");

                    b.Navigation("PackageRoles");

                    b.Navigation("PackageTestExams");

                    b.Navigation("TestExamPackages");
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.PackageType", b =>
                {
                    b.Navigation("PackageTypeTargetScreens");
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.ReadOnly.Classroom", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.ReadOnly.TestExam", b =>
                {
                    b.Navigation("PackageTestExams");
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.Role", b =>
                {
                    b.Navigation("PackageRoles");

                    b.Navigation("RoleClaims");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("TurkcellDigitalSchool.Account.Domain.Concrete.User", b =>
                {
                    b.Navigation("OrganisationUsers");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
